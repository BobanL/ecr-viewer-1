name: ecr-viewer

services:
  ecr-viewer:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
        - APP_VERSION=1.0
    network_mode: host
    environment:
      - CONFIG_NAME=${CONFIG_NAME:-AWS_SQLSERVER_NON_INTEGRATED}
      - NBS_PUB_KEY=${NBS_PUB_KEY:-}
      # METADATA DATABASE
      - DATABASE_URL=${DATABASE_URL:-postgres://postgres:pw@localhost:5432/ecr_viewer_db}
      # SQL Server - backwards compat
      - SQL_SERVER_USER
      - SQL_SERVER_PASSWORD
      - SQL_SERVER_HOST

      # AWS
      - AWS_CUSTOM_ENDPOINT=http://localhost:4566
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - ECR_BUCKET_NAME=${ECR_BUCKET_NAME:-ecr-viewer-files}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-123}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-xyz}
      # Azure
      - AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;
      - AZURE_CONTAINER_NAME=${AZURE_CONTAINER_NAME:-ecr-viewer-files}
      # GCP
      - 'GCP_KEY=${GCP_KEY:-{ "client_email": "ecr@example.com", "private_key": "1234" }}'
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-proj}
      - GCP_API_ENDPOINT=${GCP_API_ENDPOINT:-http://localhost:10001/}
      # Orchestration
      - ORCHESTRATION_URL=${ORCHESTRATION_URL:-http://localhost:8080/}
      # Auth
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000/ecr-viewer/api/auth/}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-EjHXcPcFD17f5nYRaQeN9ncNpOoU80HTA6x4UBUk5pM=}
      - AUTH_PROVIDER=${AUTH_PROVIDER:-keycloak}
      - AUTH_CLIENT_ID=${AUTH_CLIENT_ID:-ecr-viewer}
      - AUTH_CLIENT_SECRET=${AUTH_CLIENT_SECRET:-P7e6LOwZXhJq1MCo0GSRAQFqBOYDuaBx}
      - AUTH_ISSUER=${AUTH_ISSUER:-http://localhost:8070/realms/master}
      # Open Telemetry
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://localhost:4318/v1/metrics
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:4318/v1/traces
    profiles:
      - ecr-viewer

  postgres:
    image: "postgres:alpine"
    ports:
      - "5432:5432"
    volumes:
      - ./seed-scripts/sql/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./sql/core.sql:/docker-entrypoint-initdb.d/core.sql
      - ./seed-scripts/sql/.pgpass/:/usr/local/lib/.pgpass
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - PGUSER=postgres
      - POSTGRES_PASSWORD=pw
      - POSTGRES_DB=ecr_viewer_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 5s
      retries: 20
    profiles:
      - AWS_PG_NON_INTEGRATED
      - AZURE_PG_NON_INTEGRATED
      - GCP_PG_NON_INTEGRATED
      - AWS_PG_DUAL
      - AZURE_PG_DUAL
      - GCP_PG_DUAL

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SQL_SERVER_PASSWORD:-Password1!}
    ports:
      - "1433:1433"
    volumes:
      - ./sql/entrypoint.sh:/var/opt/mssql/scripts/entrypoint.sh
      - ./sql/extended.sql:/var/opt/mssql/scripts/extended.sql
    entrypoint: /bin/bash -c "/var/opt/mssql/scripts/entrypoint.sh"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P Password1! -Q "SELECT * FROM sys.tables where name=''ECR_DATA''" -C | grep -q "(0 rows affected)" && exit 1 || exit 0',
        ]
      interval: 20s
      retries: 5
    profiles:
      - AWS_SQLSERVER_NON_INTEGRATED
      - AZURE_SQLSERVER_NON_INTEGRATED
      - GCP_SQLSERVER_NON_INTEGRATED
      - AWS_SQLSERVER_DUAL
      - AZURE_SQLSERVER_DUAL
      - GCP_SQLSERVER_DUAL

  aws-storage:
    image: gresau/localstack-persist:3
    ports:
      - "4566:4566"
    volumes:
      - aws-data:/persisted-data
      - ./seed-scripts/aws:/etc/localstack/init/ready.d
    profiles:
      - AWS_INTEGRATED
      - AWS_PG_NON_INTEGRATED
      - AWS_SQLSERVER_NON_INTEGRATED
      - AWS_PG_DUAL
      - AWS_SQLSERVER_DUAL

  azure-storage:
    build:
      context: ./seed-scripts
      dockerfile: azurite.Dockerfile
    hostname: azurite
    restart: always
    command:
      - /bin/sh
      - -c
      - |
        azurite --blobHost 0.0.0.0 --blobPort 10000 -l data --debug /data/debug.log &
        sleep 5
        az storage container create --name ecr-viewer-files
        tail -f /dev/null
    volumes:
      - azure-data:/opt/azurite/data
    environment:
      AZURE_STORAGE_CONNECTION_STRING: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://localhost:10000/devstoreaccount1;
    healthcheck:
      test: nc 127.0.0.1 10000 -z
      interval: 1s
      retries: 30
    ports:
      - "10000:10000"
    profiles:
      - AZURE_INTEGRATED
      - AZURE_PG_NON_INTEGRATED
      - AZURE_SQLSERVER_NON_INTEGRATED
      - AZURE_PG_DUAL
      - AZURE_SQLSERVER_DUAL

  gcp-storage:
    image: fsouza/fake-gcs-server
    ports:
      - 10001:10001
    command: ["-scheme", "http", "-port", "10001"]
    volumes:
      - ./seed-scripts/gcp:/data
      - gcp-data:/storage
    profiles:
      - GCP_INTEGRATED
      - GCP_PG_NON_INTEGRATED
      - GCP_SQLSERVER_NON_INTEGRATED
      - GCP_PG_DUAL
      - GCP_SQLSERVER_DUAL

  # Keycloak for authentication
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.2
    command:
      - "start-dev"
      - "--import-realm"
      - "--health-enabled=true"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - 8070:8080
      - 8071:9000
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/host.docker.internal/8071; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:8071\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1",
        ]
      interval: 5s
      timeout: 2s
      retries: 15

volumes:
  db:
  azure-data:
  aws-data:
  gcp-data:
